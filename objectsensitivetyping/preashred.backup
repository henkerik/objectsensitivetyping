#include <AST.h>
#include <AST_transform.h>
#include <AST_visitor.h>
#include <pass_manager/Plugin_pass.h>
#include <process_ir/fresh.h>
#include <process_ir/General.h>
#include <lib/Stack.h>

using namespace AST;

/*

namespace AST 
{
    void mark_var_as_lhs (AST::Variable* in)
    {
    	in->attrs->set_true("phc.ast_shredder.use_ref");

    	if (isa<Variable> (in->target))
    		mark_var_as_lhs (dyc<Variable> (in->target));
    }
    
    class Annotate : public AST::Visitor, public virtual GC_obj
    {
        protected:
            bool generate_array_temps;
        	bool return_by_ref;
        
        public:
            Annotate() : generate_array_temps(true) 
            {
            }


            void pre_assignment(Assignment* in)
            {
	
            	// Assignments of the form $$e =& $d dont work if $$e is split
            	// into a temporary first, except if they have array_indices.
            	// TODO: what about if they have targets?
            	if (in->is_ref && in->variable->variable_name->classid() == Reflection::ID
            		&& (!isa<Variable>(in->expr) || dyc<Variable>(in->expr)->array_indices->size () == 0))
            		in->variable->attrs->set_true("phc.ast_lower_expr.no_temp");
	
            	// Don't shred $$x = $y (do shred $$x[$i] = $y; dont shred $x->$$f = $y))
            	if (in->variable->target == NULL
            		&& in->variable->variable_name->classid() == Reflection::ID
            		&& in->variable->array_indices->size () == 0)
            		in->variable->attrs->set_true("phc.ast_lower_expr.no_temp");

            	// We need references if we shred $x[0][1][etc] = ...;
            	// TODO The final part should be $T[etc] = ...;, not $T2 =& $T[etc]; $T2 = ...;
            	in->variable->attrs->set_true("phc.ast_shredder.need_addr");
            	mark_var_as_lhs (in->variable);

            	// Variables on the RHS need references if $x =& $y is being used
            	Wildcard<Variable>* rhs = new Wildcard<Variable> ();
            	if (in->is_ref && in->match (new Assignment (new Wildcard<Variable>(), false, rhs)))
            	{
            		mark_var_as_lhs (rhs->value);
            	}

            	// Assignments of the form $x = 5 do not need a temporary, but all other LHS
            	// forms ($$x = 5; $x[$y] = 5; $t->x; etc) do.
            	if (in->expr->classid () != Array::ID
            		&& in->variable->target == NULL
            		&& in->match (new Assignment (
            			new Variable (
            				new Wildcard<Target>, 
            				new Wildcard <VARIABLE_NAME>, 
            				new Expr_list),
            			false, 
            			new Wildcard<Expr>)))
            		in->expr->attrs->set_true("phc.ast_lower_expr.no_temp");

            	// Except for $x = {$y}[$z], which must be split
            	if (in->expr->match (new Variable (
            			new Wildcard<Target>,
            			new Wildcard<Reflection>,
            			NULL)))
            		in->expr->attrs->erase ("phc.ast_lower_expr.no_temp");
            }

            // op_assignments are never by reference
            void pre_op_assignment(Op_assignment* in)
            {
            	// We need references if we shred $x[0][1][etc] = ...;
            	mark_var_as_lhs (in->variable);

            	// We do need a temporary for the expression of the op_assignment,
            	// because it will be the right operand to a binary operator
            }

            void pre_post_op (Post_op* in)
            {
            	in->variable->attrs->set_true("phc.ast_shredder.use_ref");
            }

            void pre_pre_op (Pre_op* in)
            {
            	in->variable->attrs->set_true("phc.ast_shredder.use_ref");
            }

            void pre_attribute(Attribute* in)
            {
            	generate_array_temps = false;
            }

            void post_attribute(Attribute* in)
            {
            	generate_array_temps = true;
            }

            void pre_array_elem (Array_elem* in)
            {
            	if (generate_array_temps == false)
            	{
            		if(in->key)
            			in->key->attrs->set_true("phc.ast_lower_expr.no_temp");
            		if(in->val)
            			in->val->attrs->set_true("phc.ast_lower_expr.no_temp");
            	}
            }

            void pre_static_declaration(Static_declaration* in)
            {
            	generate_array_temps = false;
            }

            void post_static_declaration(Static_declaration* in)
            {
            	generate_array_temps = true;
            }

            void pre_directive (Directive* in)
            {
            	// Do not generate a temp to hold the value of a directive
            	// variable
            	in->expr->attrs->set_true("phc.ast_lower_expr.no_temp");
            }

            void pre_formal_parameter (Formal_parameter* in)
            {
            	generate_array_temps = false;
            }

            void post_formal_parameter (Formal_parameter* in)
            {
            	generate_array_temps = true;
            }

            void pre_name_with_default (Name_with_default* in)
            {
            	// Never generate a temp for a default value
            	if(in->expr)
            		in->expr->attrs->set_true("phc.ast_lower_expr.no_temp");
            }

            // TODO nested functions?
            void pre_method (Method* in)
            {
            	return_by_ref = in->signature->is_ref;
            }

            void post_method (Method* in)
            {
            	return_by_ref = false;
            }

            void post_return (Return* in)
            {
            	if (return_by_ref 
            			&& in->expr->classid () == Variable::ID)
            	{
            		in->expr->attrs->set_true ("phc.ast_shredder.use_ref");
            	}
            }

            void post_method_invocation (Method_invocation* in)
            {

            	// It isn't correct to shred variables which may be references at
            	// run-time, but where we cannot tell if they are at compile-time. The
            	// only occurrence of this in PHP is actual parameters. 
            	foreach (Actual_parameter* ap, *in->actual_parameters)
            	{
            		// We can shred variable that we know are passed by reference
            		if (ap->is_ref)
            		{
            			ap->expr->attrs->set_true ("phc.ast_shredder.use_ref");
            			ap->expr->attrs->set_true ("phc.ast_shredder.need_addr");
            		}
            		else if (dynamic_cast<Variable*> (ap->expr))
            			ap->expr->attrs->set_true("phc.ast_shredder.dont_shred");
            	}

            }


            // Statements can occur nested within expressions, in which case we'd like
            // to simplify them. We mark assignments which occur as an eval_expr, then mark
            // all other assignments as being nested_stmts.
            // 
            void pre_eval_expr (Eval_expr* in)
            {
            	if (in->expr->classid() == Assignment::ID ||
            			in->expr->classid() == Op_assignment::ID ||
            			in->expr->classid() == List_assignment::ID)
            	{
            		in->expr->attrs->set_true("phc.ast_shredder.non_nested_assignment");
            	}

            	if (in->expr->classid() == Method_invocation::ID)
            	{
            		// Do not generate temps for top-level method invocations
            		in->expr->attrs->set_true("phc.ast_lower_expr.no_temp");
            	}
            }

            // A while should have TRUE as its parameter, after early_lower_control_flow. 
            void pre_while (While* in)
            {
            	in->expr->attrs->set_true("phc.ast_lower_expr.no_temp");
            }

            // To print compile-time error messages for breaks, we must keep this for now.
            // When the errors are done in data-flow, we can remove this. 
            void pre_break (Break* in)
            {
            	if (in->expr)
            		in->expr->attrs->set_true("phc.ast_lower_expr.no_temp");
            }
    };

    class Lower_expr : public AST::Transform, public virtual GC_obj
    {
        public:
            void children_php_script(PHP_script* in)
            {
	            pieces = new Statement_list;
	            Transform::children_php_script(in);
            }


             // For each statement that contains an expression, we push back the
             // pieces created for each part of the expression.
             

            void post_eval_expr (Eval_expr* in, Statement_list* out)
            {
	            push_back_pieces(in, out);
            }

            void post_global (Global* in, Statement_list* out)
            {
	            push_back_pieces(in, out);
            }

            void post_return (Return* in, Statement_list* out)
            {
	            push_back_pieces(in, out);
            }

            void post_continue (Continue* in, Statement_list* out)
            {
	            push_back_pieces(in, out);
            }

            void post_break (Break* in, Statement_list* out)
            {
	            push_back_pieces(in, out);
            }

            void post_throw (Throw* in, Statement_list* out)
            {
	            push_back_pieces(in, out);
            }


            // For each control-flow statement that contains an expression, we
            // push back the pieces created for each part of the expression, but
            // before the statement, since it can contain sub-statements.


            // Avoid putting the pieces from the expression into the body 
            void children_if (If* in)
            {
	            in->expr = transform_expr(in->expr);

	            backup_pieces();
	            in->iftrue = transform_statement_list(in->iftrue);
	            in->iffalse = transform_statement_list(in->iffalse);
	            restore_pieces();
            }

            void post_if (If* in, Statement_list* out)
            {
	            push_back_pieces(in, out);
            }

            void children_while (While* in)
            {
	            in->expr = transform_expr(in->expr);
                
	            backup_pieces();
	            in->statements = transform_statement_list(in->statements);
	            restore_pieces();
            }

            void post_while (While* in, Statement_list* out)
            {
	            push_back_pieces(in, out);
            }

            // No need to mess with the key and val, as they are written to,
            // not read from. Early_lower_control_flow deals with them.
            void children_foreach (Foreach* in)
            {
	            in->expr = transform_expr(in->expr);

	            backup_pieces();
	            in->statements = transform_statement_list(in->statements);
	            restore_pieces();
            }

            void post_foreach (Foreach* in, Statement_list* out)
            {
	            push_back_pieces(in, out);
            }

            // 
            // Pushing back, storing and restoring pieces
            // 

            void push_back_pieces(Statement* in, Statement_list* out)
            {
	            out->push_back_all(pieces);
	            out->push_back(in);

	            // Move comment to the first piece (if any)
	            if(!pieces->empty())
	            {
		            pieces->front()->attrs->set("phc.comments", in->get_comments());
		            in->attrs->set("phc.comments", new String_list);
	            }

	            pieces->clear();
            }

            void backup_pieces()
            {
	            pieces_backup.push(pieces);
	            pieces = new Statement_list;
            }

            void restore_pieces()
            {
	            pieces = pieces_backup.top();
	            pieces_backup.pop();
            }

            // 
            // A common pattern is captured by "eval", which takes an argument
            // an expression e, generates a new temporary T, and pushes back the
            // statement
            //  
            //   T = e;
            // 
            // the value returned is the expression "T". 
            // 
            // If the node is marked "phc.lower_expr.no_temp", eval simply
            // returns in.
            // 

            Expr* eval(Expr* in)
            {
	            if(in->attrs->is_true("phc.ast_lower_expr.no_temp"))
	            {
		            return in;
	            }
	            else
	            {
		            Variable* temp = fresh_var("TLE"); 
		            eval(in, temp);
		            return temp;
	            }
            }

            // Variation on eval that takes in the name of the temp
            void eval(Expr* in, Variable* temp)
            {
	            pieces->push_back(new Eval_expr(new Assignment(temp->clone (), false, in->clone ())));
            }
            
        protected:
        	Statement_list* pieces;
        	Stack<Statement_list*> pieces_backup;
    };


    class PreAshred : public virtual AST::Lower_expr {
        public:
            void children_php_script(PHP_script* in)
            {
            	Annotate ann;
            	in->visit(&ann);
            	
                post_pieces = new Statement_list;
            	Lower_expr::children_php_script(in);
            }

            // 
            // Variables (array indexing, object indexing)
            // 
            // We do the indexing bit-by-bit. For example, for $c->a[1][2][3], we get
            // 
            //  $T0 =& $c->arr;
            //  $T1 =& $T0[1];
            //  $T2 =& $T1[2];
            //  $T2[3] ... ;
            // 
            // However, we always stop one short, as in $T2 above. This is necessary in the
            // case of unset, returning by reference, and a number of other cases.
            // 
            // Note that it is important to use reference assignment, because when we
            // assign to $T2[2] above, we want the original object $c to be modified.
            // 
            // However, introducing references where there were no references before will
            // result in an element being inserted in the array if the element is
            // missing, or the array is NULL. For example,
            // 
            //  	$x = $y[5];
            // 
            //  is different than
            // 
            //  	$x =& $y[5];
            // 
            //  since $y has no index 5.
            // 
            // As a result, we use reference assignment only if there is an implicit
            // reference, or reference assignment is used.
            // 

            Variable* post_variable(Variable* in)
            {
            	if (in->attrs->is_true ("phc.ast_shredder.dont_shred"))
            		return in;

            	Variable* prev = in;

            	int num_pieces = 
            		  (in->target != NULL ? 1 : 0) 
            		+ in->array_indices->size()
            		- (in->attrs->is_true("phc.ast_shredder.need_addr") ? 1 : 0);

            	// translate ${$x}[1] to $T =& ${$x}; $T[1] but only if no target is set
            	if(in->target == NULL 
            		&& in->variable_name->classid() == Reflection::ID
            		&& !in->attrs->is_true ("phc.ast_lower_expr.no_temp"))
            	{
            		Variable* temp = fresh_var("TSr");

            		pieces->push_back(
            			new Eval_expr(
            				new Assignment(
            					temp->clone (), 
            					in->attrs->is_true ("phc.ast_shredder.use_ref"),
            					new Variable (in->variable_name))));

            		prev = temp;
            	}

            	if(in->target != NULL && num_pieces > 0)
            	{
            		Variable* temp = fresh_var("TSt");
            		pieces->push_back(new Eval_expr(new Assignment(
            			temp->clone (),
            			in->attrs->is_true ("phc.ast_shredder.use_ref"),
            			new Variable (
            				in->target,
            				in->variable_name->clone(),
            				new Expr_list
            			))));
            		prev = temp;
            		num_pieces--;

            		// TODO: this destructively modifies *in. is that what we want?
            		in->target = NULL;
            	}

            	while(num_pieces > 0)
            	{
            		// Get the array index (can be NULL)
            		Expr* array_index = in->array_indices->front ();
            		if (array_index)
            			array_index = array_index->clone ();
            		// TODO: this destructively modifies *in. is that what we want?
            		in->array_indices->pop_front();


            		Variable* temp = fresh_var("TSi");
            		pieces->push_back(new Eval_expr(new Assignment(
            			temp->clone (),
            			in->attrs->is_true ("phc.ast_shredder.use_ref"),
            			new Variable (
            				NULL, 
            				prev->variable_name->clone(), 
            				new Expr_list (array_index)))));
            		prev = temp;
            		num_pieces--;
            	}

            	if(prev != in && !in->array_indices->empty())
            	{
            		prev = prev->clone();
            		Expr* front = in->array_indices->front();
            		in->array_indices->pop_front();

            		if (front) // NULL expressions are allowed
            			front = front->clone ();

            		prev->array_indices->push_back(front);
            	}

            	return prev;
            }

            // 
            // Binary and unary operators
            // 
            // The "lazy" binary operators (&&, ||, and friends) are not dealt with here, 
            // but in the lowering pass. Pre and post operators are handled in Early_Shredder.
            // 

            Expr* post_bin_op(Bin_op* in)
            {
            	return eval(in);
            }

            Expr* post_unary_op(Unary_op* in)
            {
            	return eval(in);
            }

            // 
            // Casts
            // 

            Expr* post_cast(Cast* in)
            {
            	return eval(in);
            }

            // 
            // instanceof
            // 

            Expr* post_instanceof (Instanceof* in)
            {
            	return eval(in);
            }

            // 
            // Method invocation
            // 

            Expr* post_method_invocation(Method_invocation* in)
            {
            	return eval(in);
            }

            Expr* post_new (New* in)
            {
            	return eval(in);
            }

            // 
            // Literals
            // 

            // In most cases, it isnt required to shred literals, but it simplifies matters
            // a great deal. If we don't shred these, then we need to simplify reflections
            // and branches with immediate values, run a constant-folding pass after
            // switch-lowering, remove literals in statements by themselves, and allow the
            // unparser to print unprintable variables (like $5 or ${""}). All of these
            // changes would then have to be duplicated in the MIR. It is simpler to shred
            // here, and just make the changes in the MIR. 

            Expr* post_int(INT* in)
            {
            	return eval(in);
            }

            Expr* post_real(REAL* in)
            {
            	return eval(in);
            }

            Expr* post_string(STRING* in)
            {
            	return eval(in);
            }

            Expr* post_bool(BOOL* in)
            {
            	return eval(in);
            }

            Expr* post_nil(NIL* in)
            {
            	return eval(in);
            }

            Expr* post_constant (Constant* in)
            {
            	return eval(in);
            }

            // 
            // Translate into canonical tree form (replace assignments within expressions
            // with an assignment and a variable access:
            // 
            // Translate
            // 
            //    $x = $y = 5;
            // 
            //  into
            // 
            //    $y = 5;
            //    $t1 = $y;
            //    $x = $t1;
            // 
            Expr* post_assignment (Assignment* in)
            {
            	if (in->attrs->is_true ("phc.ast_shredder.non_nested_assignment"))
            		return in;

            	// dont replace with the same variable, since it may be assigned to multiple
            	// times in the same expression.
            	pieces->push_back (new Eval_expr (in));
            	return eval (in->variable);
            }

            // 
            // Array literals
            // 

            Expr* post_array(Array* in)
            {
            	if (in->attrs->is_true("phc.ast_lower_expr.no_temp"))
            		return in;

            	Variable* var = fresh_var ("TSa");

            	// We need to unset TS in case its run in a loop
            	pieces->push_back(new Eval_expr(new Method_invocation("unset", var->clone ())));

            	// We need to cast it in case its empty
            	pieces->push_back(
            		new Eval_expr (
            			new Assignment (
            				var->clone (), 
            				false, 
            				new Cast(
            					"array", 
            					new String ("array"), 
            					var->clone ()))));


            	// It makes it much much easier to analyse if we don't throw this
            	// information away. A key without an index uses the next largest key. 
            	int key_count = 0;
            	bool use_count = true;
            	foreach (Array_elem* ae, *in->array_elems)
            	{
            		Expr* key;

            		if(ae->key != NULL)
            		{
            			key = ae->key;

            			// This disrupts the count (we could carry on, but it'll only helpful
            			// in rare occasions).
            			use_count = false;
            		}
            		else if (use_count)
            		{
            			key = new INT (key_count);
            			key_count++;
            		}
            		else
            			key = NULL;

            		pieces->push_back(
            			new Eval_expr(
            				new Assignment(
            					new Variable (
            						NULL,
            						var->variable_name->clone(),
            						new Expr_list (key)),
            					ae->is_ref,
            					ae->val)));
            	}

            	return new Variable (var->variable_name->clone ());
            }

            // Turn
            // 
            //  	$x[...] += $y;
            // 
            //  into
            // 
            //  	$T &= $x[...]
            //  	$T = $T + $y;
            // 
            //  If $x is a simple variable, simply turn into
            // 
            //  	$x = $x + $y;
            // 
            Expr* post_op_assignment(Op_assignment* in)
            {
            	Assignment* assignment;

            	// The LHS may be of the form $x[$y], but that should occur
            	// as an operand to a binary operator. Hence, we must visit the RHS again
            	// clearing the need_addr flag
            	in->variable->attrs->erase("phc.ast_shredder.need_addr");

            	Variable* lhs = in->variable;
            	// If not a simple varaible, then $lhs &= $x[...];
            	if (!lhs->is_simple_variable ())
            	{
            		lhs = fresh_var ("Toa");
            		Expr* copy = new Assignment (
            				lhs->clone (),
            				true,
            				in->variable);

            		copy->transform_children (this);
            		pieces->push_back (new Eval_expr (copy));
            	}

            	// Create $T = $T + $y;
            	assignment = new Assignment(
            		lhs,
            		false,
            		new Bin_op (
            			lhs->clone (),
            			in->op, 
            			in->expr));

            	assignment->attrs = in->attrs;

            	// This might still be nested assignment
            	return post_assignment (assignment);
            }

            Expr* pre_ignore_errors(Ignore_errors* in)
            {
            	Variable* zero = fresh_var("TSie");
            	Variable* temp = fresh_var("TSie");
            	pieces->push_back(new Eval_expr(new Assignment(
            		zero,
            		false,
            		new INT(0))));
            	pieces->push_back(new Eval_expr(new Assignment(
            		temp,
            		false,
            		new Method_invocation(
            			"error_reporting",
            			zero->clone ()))));
            	in->attrs->set("phc.ast_shredder.old_error_level", temp->clone ());
            	return in;
            }

            Expr* post_ignore_errors(Ignore_errors* in)
            {
            	Variable* temp = fresh_var("TSie");
            	Variable* old = dynamic_cast<Variable*>(in->attrs->get("phc.ast_shredder.old_error_level"));
            	in->attrs->erase ("phc.ast_shredder.old_error_level");
            	assert(old);

            	(*pieces
            		<< temp << " = error_reporting (" << old << ");"
            	).finish (in);

            	return in->expr;
            }
            
            
            // 
            // For Eval_expr we can execute the post-op after the expression is evaluated
            // (option 1, above)
            // 
    
            void post_eval_expr(Eval_expr* in, Statement_list* out)
            {
            	// clear the post_pieces before calling post_back_pieces to avoid an
            	// assertion failure
            	Statement_list* eval_post_pieces = post_pieces;
            	post_pieces = new Statement_list;
    
            	Lower_expr::push_back_pieces(in, out);
            	out->push_back_all(eval_post_pieces);
            }
    
            // 
            // For If-statements we push the post-op into both branches of the if
            // 
    
            void children_if(If* in)
            {
            	in->expr = transform_expr(in->expr);
    
            	Statement_list* if_post_pieces = post_pieces;
            	post_pieces = new Statement_list;
    
            	backup_pieces();
            	in->iftrue = transform_statement_list(in->iftrue);
            	in->iffalse = transform_statement_list(in->iffalse);
            	restore_pieces();
    
            	in->iftrue->push_front_all(if_post_pieces->clone());
            	in->iffalse->push_front_all(if_post_pieces);
            }
    
            // 
            // Control flow constructs (option 3, above)
            // 
    
            void post_return(Return* in, Statement_list* out)
            {
            	clear_post_pieces(&in->expr);
            	Lower_expr::post_return(in, out);
            }
    
            void post_continue(Continue* in, Statement_list* out)
            {
            	clear_post_pieces(&in->expr);
            	Lower_expr::post_continue(in, out);
            }
    
            void post_break(Break* in, Statement_list* out)
            {
            	clear_post_pieces(&in->expr);
            	Lower_expr::post_break(in, out);
            }
    
            void post_throw(Throw* in, Statement_list* out)
            {
            	clear_post_pieces(&in->expr);
            	Lower_expr::post_throw(in, out);
            }
    
            void clear_post_pieces(Expr** in)
            {
            	if(!post_pieces->empty())
            	{
            		*in = eval(*in);
            		pieces->push_back_all(post_pieces->clone());
            		post_pieces->clear();
            	}
            }
    
            // 
            // We can deal with whiles if necessary but we don't have to: while loops have
            // already been lowered into a 
            // while(True) { ... if(..) break; ... } structure
            //  
            // There really shouldn't be any any pre or post-ops in the expression of a
            // foreach loop, but even if there are, they should already have been lowered
            // 
    
            void post_while(While* in, Statement_list* out)
            {
            	assert(post_pieces->empty());
            	Lower_expr::post_while(in, out);
            }
    
            void post_foreach(Foreach* in, Statement_list* out)
            {
            	assert(post_pieces->empty());
            	Lower_expr::post_foreach(in, out);
            }
    
            // 
            // Administration: add assertions that the post-pieces are handled elsewhere
            // 
    
            void push_back_pieces(Statement* in, Statement_list* out)
            {
            	assert(post_pieces->empty());
            	Lower_expr::push_back_pieces(in, out);
            }
    
            void backup_pieces()
            {
            	assert(post_pieces->empty());
            	Lower_expr::backup_pieces();
            }
        protected:
            Statement_list* post_pieces;
            Stack<Statement_list*> post_pieces_backup;
    };
}
*/
namespace AST 
{

    class Parent : public Transform, virtual public GC_obj
    {
    public:
    	void children_php_script(PHP_script* in)
    	{
//            cout << "1............" << endl;
    	    
    	    pieces      = new Statement_list;
    	    post_pieces = new Statement_list;
    	    
        	Transform::children_php_script(in);
    	}

    public:
    	void children_if (If* in)
    	{

            
        	in->expr = transform_expr(in->expr);

        	Statement_list* if_post_pieces = post_pieces;
        	post_pieces = new Statement_list;

        	backup_pieces();
        	in->iftrue = transform_statement_list(in->iftrue);
        	in->iffalse = transform_statement_list(in->iffalse);
        	restore_pieces();

        	in->iftrue->push_front_all(if_post_pieces->clone());
        	in->iffalse->push_front_all(if_post_pieces);
    	}
    	
    	
    	void post_if (If* in, Statement_list* out)
    	{
    	    push_back_pieces(in, out);
    	}

    	void children_while (While* in)
    	{
    	    in->expr = transform_expr(in->expr);

        	backup_pieces();
        	in->statements = transform_statement_list(in->statements);
        	restore_pieces();
    	}
    	void post_while (While* in, Statement_list* out)
    	{
    	    push_back_pieces(in, out);
    	}

    	void children_foreach (Foreach* in)
    	{
    	    in->expr = transform_expr(in->expr);

        	backup_pieces();
        	in->statements = transform_statement_list(in->statements);
        	restore_pieces();
    	}
    	void post_foreach (Foreach* in, Statement_list* out)
    	{
    	    push_back_pieces(in, out);
    	}

    	// Switch is already lowered
    	// Do is already lowered
    	// For is already lowered
    	// Try blocks don't have expressions so don't need special treatment
    	// Static declarations cannot be lowered

    	void post_eval_expr (Eval_expr* in, Statement_list* out)
    	{
//            cout << "2.." << endl;
    	    
    	    Statement_list* eval_post_pieces = post_pieces;
        	post_pieces = new Statement_list;

        	push_back_pieces(in, out);
        	out->push_back_all(eval_post_pieces);
    	}
    	void post_return (Return* in, Statement_list* out)
    	{
    	    push_back_pieces(in, out);
    	}
    	void post_global (Global* in, Statement_list* out)
    	{
    	    push_back_pieces(in, out);
    	}
    	void post_continue (Continue* in, Statement_list* out)
    	{
    	    push_back_pieces(in, out);
    	}
    	void post_break (Break* in, Statement_list* out)
    	{
    	    push_back_pieces(in, out);
    	}
    	void post_throw (Throw* in, Statement_list* out)
    	{
    	    push_back_pieces(in, out);
    	}

    // Common code generation patterns
    protected:
    	Expr* eval(Expr* in)
    	{
    	    if(in->attrs->is_true("phc.ast_lower_expr.no_temp"))
        	{
        		return in;
        	}
        	else
        	{
        		Variable* temp = fresh_var("TLE"); 
        		eval(in, temp);
        		return temp;
        	}
    	}
    	void eval(Expr* in, Variable* temp)
    	{
    	    pieces->push_back(new Eval_expr(new Assignment(temp->clone (), false, in->clone ())));
    	}

    // Define a number of hooks that can be redefined by inheriting classes
    // to tweak the behaviour of the transformation
    protected:
    	virtual void push_back_pieces(Statement* in, Statement_list* out)
    	{
    	    out->push_back_all(pieces);
        	out->push_back(in);

        	// Move comment to the first piece (if any)
        	if(!pieces->empty())
        	{
        		pieces->front()->attrs->set("phc.comments", in->get_comments());
        		in->attrs->set("phc.comments", new String_list);
        	}

        	pieces->clear();
    	}
    	virtual void backup_pieces()
    	{
    	    pieces_backup.push(pieces);
        	pieces = new Statement_list;
    	}
    	virtual void restore_pieces()
    	{
    	    pieces = pieces_backup.top();
        	pieces_backup.pop();
    	}

    protected:
    	Statement_list* pieces;
    	Stack<Statement_list*> pieces_backup;
    	
    	Statement_list* post_pieces;
    	Stack<Statement_list*> post_pieces_backup;
    };

    class PreAshred : public AST::Visitor, public virtual GC_obj
    {
        void post_variable(Variable* in)
        {
            // Prevent the ASHRED 
            if (in->target != NULL || !in->array_indices->empty()) 
                in->attrs->set_true ("phc.ast_shredder.dont_shred");
        }
    };
    
    class RemoveOpAssignment : public AST::Parent, public virtual GC_obj
    {
        void children_php_script(PHP_script* in)
        {    
            cout << "chidlren php script" << endl;
            
        	AST::Parent::children_php_script(in);
        }
        
        Expr* post_op_assignment(Op_assignment* in)
        {
            cout << "post op assignment" << endl;
            
//            return in;
            
            Assignment* assignment;

        	// The LHS may be of the form $x[$y], but that should occur
        	// as an operand to a binary operator. Hence, we must visit the RHS again
        	// clearing the need_addr flag
        	in->variable->attrs->erase("phc.ast_shredder.need_addr");

        	Variable* lhs = in->variable;
        	// If not a simple varaible, then $lhs &= $x[...];
        	if (!in->variable->is_simple_variable ())
        	{
        		lhs = fresh_var ("Toa");
//        		lhs->attrs->set_true ("phc.ast_shredder.dont_shred");
//        	/*	Expr* copy = new Assignment (
//        				lhs->clone (),
//        				false,
//        				in->variable);
//
//        		copy->transform_children (this);
//        		pieces->push_back (new Eval_expr (copy));
//        		
//        		Expr* copy2 = new Assignment (
//        				in->variable,
//        				false,
//        				lhs->clone());
//
//        		copy2->transform_children (this);
//        		post_pieces->push_back (new Eval_expr (copy2));
//        		
        	}

        	// Create $T = $T + $y;
        	assignment = new Assignment(
        		lhs,
        		false,
        		new Bin_op (
        			lhs->clone (),
        			in->op, 
        			in->expr));

        	assignment->attrs = in->attrs;
        	

        	// This might still be nested assignment
        	return post_assignment (assignment);
        }
    };
}

    
extern "C" void load (Pass_manager* pm, Plugin_pass* pass)
{
    pm->add_before_named_pass (pass, new String ("ashred"));
}

extern "C" void run_ast (AST::PHP_script* in, Pass_manager* pm, String* option)
{
//    AST::PreAshred transform;
//    in->transform_children(&transform);

    AST::PreAshred visitor;
    in->visit (&visitor);
    
    AST::RemoveOpAssignment transform;
    in->transform_children(&transform);
}